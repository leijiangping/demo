<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xunge.dao.basedata.DatSupplierVOMapper">
	<resultMap id="BaseResultMap" type="com.xunge.model.basedata.DatSupplierVO">
		<id column="supplier_id" property="supplierId" jdbcType="VARCHAR" />
		<result column="prv_id" property="prvId" jdbcType="VARCHAR" />
		<result column="prv_sname" property="prvSname" jdbcType="VARCHAR" />
		<result column="preg_id" property="pregId" jdbcType="VARCHAR" />
		<result column="preg_name" property="pregName" jdbcType="VARCHAR" />
		<result column="reg_id" property="regId" jdbcType="VARCHAR" />
		<result column="reg_name" property="regName" jdbcType="VARCHAR" />
		<result column="is_downshare" property="isDownshare" jdbcType="INTEGER" />
		<result column="supplier_code" property="supplierCode"
			jdbcType="VARCHAR" />
		<result column="supplier_name" property="supplierName"
			jdbcType="VARCHAR" />
		<result column="supplier_site" property="supplierSite"
			jdbcType="VARCHAR" />
		<result column="supplier_address" property="supplierAddress"
			jdbcType="VARCHAR" />
		<result column="supplier_contact" property="supplierContact"
			jdbcType="VARCHAR" />
		<result column="supplier_telephone" property="supplierTelephone"
			jdbcType="VARCHAR" />
		<result column="supplier_type" property="supplierType"
			jdbcType="INTEGER" />
		<result column="account_type" property="accountType" jdbcType="INTEGER" />
		<result column="bank_user" property="bankUser" jdbcType="VARCHAR" />
		<result column="deposit_bank" property="depositBank" jdbcType="VARCHAR" />
		<result column="bank_account" property="bankAccount" jdbcType="VARCHAR" />
		<result column="supplier_state" property="supplierState"
			jdbcType="INTEGER" />
		<result column="supplier_note" property="supplierNote"
			jdbcType="VARCHAR" />
		<result column="data_from" property="dataFrom" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		supplier_id, prv_id, prv_sname, preg_id, preg_name, reg_id, reg_name,
		is_downshare,
		supplier_code, supplier_name, supplier_site, supplier_address, supplier_contact,
		supplier_telephone, supplier_type, account_type, bank_user,
		deposit_bank, bank_account,
		supplier_state, supplier_note, data_from
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.xunge.dao.basedata.DatSupplierVOExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from dat_supplier
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from dat_supplier
		where supplier_id = #{supplierId,jdbcType=VARCHAR}
	</select>
	<select id="selectByIdlist" resultType="String"
		parameterType="java.util.List">
		select rc.supplier_id
		from rent_contract rc
		left join dat_contract dc
		on rc.contract_id = dc.contract_id
		where dc.old_contract_id IN
		<foreach collection="list" item="item" index="index" open="("
			separator="," close=")">
			#{item}
		</foreach>
		union 
		select ec.supplier_id
		from ele_contract ec
		left join dat_contract dc
		on ec.contract_id = dc.contract_id
		where dc.old_contract_id IN
		<foreach collection="list" item="item" index="index" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</select>
	<select id="selectByParam" resultMap="BaseResultMap"
		parameterType="com.xunge.model.basedata.DatSupplierVO">
		select
		<include refid="Base_Column_List" />
		from dat_supplier
		where
		prv_id=#{prvId,jdbcType=VARCHAR}
		and supplier_code=#{supplierCode,jdbcType=VARCHAR}
		and supplier_site=#{supplierSite,jdbcType=VARCHAR}
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from dat_supplier
		where supplier_id = #{supplierId,jdbcType=VARCHAR}
	</delete>
	<delete id="deleteByExample" parameterType="com.xunge.dao.basedata.DatSupplierVOExample">
		delete from dat_supplier
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.xunge.model.basedata.DatSupplierVO">
		insert into dat_supplier (supplier_id, prv_id, prv_sname,
		preg_id, preg_name, reg_id,
		reg_name, is_downshare, supplier_code,
		supplier_name, supplier_site, supplier_address,
		supplier_contact, supplier_telephone, supplier_type,
		account_type, bank_user, deposit_bank,
		bank_account, supplier_state, supplier_note,
		data_from)
		values (#{supplierId,jdbcType=VARCHAR}, #{prvId,jdbcType=VARCHAR},
		#{prvSname,jdbcType=VARCHAR},
		#{pregId,jdbcType=VARCHAR}, #{pregName,jdbcType=VARCHAR}, #{regId,jdbcType=VARCHAR},
		#{regName,jdbcType=VARCHAR}, #{isDownshare,jdbcType=INTEGER},
		#{supplierCode,jdbcType=VARCHAR},
		#{supplierName,jdbcType=VARCHAR}, #{supplierSite,jdbcType=VARCHAR},
		#{supplierAddress,jdbcType=VARCHAR},
		#{supplierContact,jdbcType=VARCHAR},
		#{supplierTelephone,jdbcType=VARCHAR},
		#{supplierType,jdbcType=INTEGER},
		#{accountType,jdbcType=INTEGER}, #{bankUser,jdbcType=VARCHAR}, #{depositBank,jdbcType=VARCHAR},
		#{bankAccount,jdbcType=VARCHAR}, #{supplierState,jdbcType=INTEGER},
		#{supplierNote,jdbcType=VARCHAR},
		#{dataFrom,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="com.xunge.model.basedata.DatSupplierVO">
		insert into dat_supplier
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="supplierId != null">
				supplier_id,
			</if>
			<if test="prvId != null">
				prv_id,
			</if>
			<if test="prvSname != null">
				prv_sname,
			</if>
			<if test="pregId != null">
				preg_id,
			</if>
			<if test="pregName != null">
				preg_name,
			</if>
			<if test="regId != null">
				reg_id,
			</if>
			<if test="regName != null">
				reg_name,
			</if>
			<if test="isDownshare != null">
				is_downshare,
			</if>
			<if test="supplierCode != null">
				supplier_code,
			</if>
			<if test="supplierName != null">
				supplier_name,
			</if>
			<if test="supplierSite != null">
				supplier_site,
			</if>
			<if test="supplierAddress != null">
				supplier_address,
			</if>
			<if test="supplierContact != null">
				supplier_contact,
			</if>
			<if test="supplierTelephone != null">
				supplier_telephone,
			</if>
			<if test="supplierType != null">
				supplier_type,
			</if>
			<if test="accountType != null">
				account_type,
			</if>
			<if test="bankUser != null">
				bank_user,
			</if>
			<if test="depositBank != null">
				deposit_bank,
			</if>
			<if test="bankAccount != null">
				bank_account,
			</if>
			<if test="supplierState != null">
				supplier_state,
			</if>
			<if test="supplierNote != null">
				supplier_note,
			</if>
			<if test="dataFrom != null">
				data_from,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="supplierId != null">
				#{supplierId,jdbcType=VARCHAR},
			</if>
			<if test="prvId != null">
				#{prvId,jdbcType=VARCHAR},
			</if>
			<if test="prvSname != null">
				#{prvSname,jdbcType=VARCHAR},
			</if>
			<if test="pregId != null">
				#{pregId,jdbcType=VARCHAR},
			</if>
			<if test="pregName != null">
				#{pregName,jdbcType=VARCHAR},
			</if>
			<if test="regId != null">
				#{regId,jdbcType=VARCHAR},
			</if>
			<if test="regName != null">
				#{regName,jdbcType=VARCHAR},
			</if>
			<if test="isDownshare != null">
				#{isDownshare,jdbcType=INTEGER},
			</if>
			<if test="supplierCode != null">
				#{supplierCode,jdbcType=VARCHAR},
			</if>
			<if test="supplierName != null">
				#{supplierName,jdbcType=VARCHAR},
			</if>
			<if test="supplierSite != null">
				#{supplierSite,jdbcType=VARCHAR},
			</if>
			<if test="supplierAddress != null">
				#{supplierAddress,jdbcType=VARCHAR},
			</if>
			<if test="supplierContact != null">
				#{supplierContact,jdbcType=VARCHAR},
			</if>
			<if test="supplierTelephone != null">
				#{supplierTelephone,jdbcType=VARCHAR},
			</if>
			<if test="supplierType != null">
				#{supplierType,jdbcType=INTEGER},
			</if>
			<if test="accountType != null">
				#{accountType,jdbcType=INTEGER},
			</if>
			<if test="bankUser != null">
				#{bankUser,jdbcType=VARCHAR},
			</if>
			<if test="depositBank != null">
				#{depositBank,jdbcType=VARCHAR},
			</if>
			<if test="bankAccount != null">
				#{bankAccount,jdbcType=VARCHAR},
			</if>
			<if test="supplierState != null">
				#{supplierState,jdbcType=INTEGER},
			</if>
			<if test="supplierNote != null">
				#{supplierNote,jdbcType=VARCHAR},
			</if>
			<if test="dataFrom != null">
				#{dataFrom,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.xunge.dao.basedata.DatSupplierVOExample"
		resultType="java.lang.Integer">
		select count(*) from dat_supplier
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update dat_supplier
		<set>
			<if test="record.supplierId != null">
				supplier_id = #{record.supplierId,jdbcType=VARCHAR},
			</if>
			<if test="record.prvId != null">
				prv_id = #{record.prvId,jdbcType=VARCHAR},
			</if>
			<if test="record.prvSname != null">
				prv_sname = #{record.prvSname,jdbcType=VARCHAR},
			</if>
			<if test="record.pregId != null">
				preg_id = #{record.pregId,jdbcType=VARCHAR},
			</if>
			<if test="record.pregName != null">
				preg_name = #{record.pregName,jdbcType=VARCHAR},
			</if>
			<if test="record.regId != null">
				reg_id = #{record.regId,jdbcType=VARCHAR},
			</if>
			<if test="record.regName != null">
				reg_name = #{record.regName,jdbcType=VARCHAR},
			</if>
			<if test="record.isDownshare != null">
				is_downshare = #{record.isDownshare,jdbcType=INTEGER},
			</if>
			<if test="record.supplierCode != null">
				supplier_code = #{record.supplierCode,jdbcType=VARCHAR},
			</if>
			<if test="record.supplierName != null">
				supplier_name = #{record.supplierName,jdbcType=VARCHAR},
			</if>
			<if test="record.supplierSite != null">
				supplier_site = #{record.supplierSite,jdbcType=VARCHAR},
			</if>
			<if test="record.supplierAddress != null">
				supplier_address = #{record.supplierAddress,jdbcType=VARCHAR},
			</if>
			<if test="record.supplierContact != null">
				supplier_contact = #{record.supplierContact,jdbcType=VARCHAR},
			</if>
			<if test="record.supplierTelephone != null">
				supplier_telephone = #{record.supplierTelephone,jdbcType=VARCHAR},
			</if>
			<if test="record.supplierType != null">
				supplier_type = #{record.supplierType,jdbcType=INTEGER},
			</if>
			<if test="record.accountType != null">
				account_type = #{record.accountType,jdbcType=INTEGER},
			</if>
			<if test="record.bankUser != null">
				bank_user = #{record.bankUser,jdbcType=VARCHAR},
			</if>
			<if test="record.depositBank != null">
				deposit_bank = #{record.depositBank,jdbcType=VARCHAR},
			</if>
			<if test="record.bankAccount != null">
				bank_account = #{record.bankAccount,jdbcType=VARCHAR},
			</if>
			<if test="record.supplierState != null">
				supplier_state = #{record.supplierState,jdbcType=INTEGER},
			</if>
			<if test="record.supplierNote != null">
				supplier_note = #{record.supplierNote,jdbcType=VARCHAR},
			</if>
			<if test="record.dataFrom != null">
				data_from = #{record.dataFrom,jdbcType=INTEGER},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update dat_supplier
		set supplier_id = #{record.supplierId,jdbcType=VARCHAR},
		prv_id = #{record.prvId,jdbcType=VARCHAR},
		prv_sname = #{record.prvSname,jdbcType=VARCHAR},
		preg_id = #{record.pregId,jdbcType=VARCHAR},
		preg_name = #{record.pregName,jdbcType=VARCHAR},
		reg_id = #{record.regId,jdbcType=VARCHAR},
		reg_name = #{record.regName,jdbcType=VARCHAR},
		is_downshare = #{record.isDownshare,jdbcType=INTEGER},
		supplier_code = #{record.supplierCode,jdbcType=VARCHAR},
		supplier_name = #{record.supplierName,jdbcType=VARCHAR},
		supplier_site = #{record.supplierSite,jdbcType=VARCHAR},
		supplier_address = #{record.supplierAddress,jdbcType=VARCHAR},
		supplier_contact = #{record.supplierContact,jdbcType=VARCHAR},
		supplier_telephone = #{record.supplierTelephone,jdbcType=VARCHAR},
		supplier_type = #{record.supplierType,jdbcType=INTEGER},
		account_type = #{record.accountType,jdbcType=INTEGER},
		bank_user = #{record.bankUser,jdbcType=VARCHAR},
		deposit_bank = #{record.depositBank,jdbcType=VARCHAR},
		bank_account = #{record.bankAccount,jdbcType=VARCHAR},
		supplier_state = #{record.supplierState,jdbcType=INTEGER},
		supplier_note = #{record.supplierNote,jdbcType=VARCHAR},
		data_from = #{record.dataFrom,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.xunge.model.basedata.DatSupplierVO">
		update dat_supplier
		<set>
			update_time = now(),
			update_user = #{update_user,jdbcType=VARCHAR},
			update_ip = #{update_ip,jdbcType=VARCHAR},
			<if test="prvId != null">
				prv_id = #{prvId,jdbcType=VARCHAR},
			</if>
			<if test="prvSname != null">
				prv_sname = #{prvSname,jdbcType=VARCHAR},
			</if>
			<if test="pregId != null">
				preg_id = #{pregId,jdbcType=VARCHAR},
			</if>
			<if test="pregName != null">
				preg_name = #{pregName,jdbcType=VARCHAR},
			</if>
			<if test="regId != null">
				reg_id = #{regId,jdbcType=VARCHAR},
			</if>
			<if test="regName != null">
				reg_name = #{regName,jdbcType=VARCHAR},
			</if>
			<if test="isDownshare != null">
				is_downshare = #{isDownshare,jdbcType=INTEGER},
			</if>
			<if test="supplierCode != null">
				supplier_code = #{supplierCode,jdbcType=VARCHAR},
			</if>
			<if test="supplierName != null">
				supplier_name = #{supplierName,jdbcType=VARCHAR},
			</if>
			<if test="supplierSite != null">
				supplier_site = #{supplierSite,jdbcType=VARCHAR},
			</if>
			<if test="supplierAddress != null">
				supplier_address = #{supplierAddress,jdbcType=VARCHAR},
			</if>
			<if test="supplierContact != null">
				supplier_contact = #{supplierContact,jdbcType=VARCHAR},
			</if>
			<if test="supplierTelephone != null">
				supplier_telephone = #{supplierTelephone,jdbcType=VARCHAR},
			</if>
			<if test="supplierType != null">
				supplier_type = #{supplierType,jdbcType=INTEGER},
			</if>
			<if test="accountType != null">
				account_type = #{accountType,jdbcType=INTEGER},
			</if>
			<if test="bankUser != null">
				bank_user = #{bankUser,jdbcType=VARCHAR},
			</if>
			<if test="depositBank != null">
				deposit_bank = #{depositBank,jdbcType=VARCHAR},
			</if>
			<if test="bankAccount != null">
				bank_account = #{bankAccount,jdbcType=VARCHAR},
			</if>
			<if test="supplierState != null">
				supplier_state = #{supplierState,jdbcType=INTEGER},
			</if>
			<if test="supplierNote != null">
				supplier_note = #{supplierNote,jdbcType=VARCHAR},
			</if>
			<if test="dataFrom != null">
				data_from = #{dataFrom,jdbcType=INTEGER},
			</if>
		</set>
		where supplier_id = #{supplierId,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.xunge.model.basedata.DatSupplierVO">
		update dat_supplier
		set prv_id = #{prvId,jdbcType=VARCHAR},
		prv_sname = #{prvSname,jdbcType=VARCHAR},
		preg_id = #{pregId,jdbcType=VARCHAR},
		preg_name = #{pregName,jdbcType=VARCHAR},
		reg_id = #{regId,jdbcType=VARCHAR},
		reg_name = #{regName,jdbcType=VARCHAR},
		is_downshare = #{isDownshare,jdbcType=INTEGER},
		supplier_code = #{supplierCode,jdbcType=VARCHAR},
		supplier_name = #{supplierName,jdbcType=VARCHAR},
		supplier_site = #{supplierSite,jdbcType=VARCHAR},
		supplier_address = #{supplierAddress,jdbcType=VARCHAR},
		supplier_contact = #{supplierContact,jdbcType=VARCHAR},
		supplier_telephone = #{supplierTelephone,jdbcType=VARCHAR},
		supplier_type = #{supplierType,jdbcType=INTEGER},
		account_type = #{accountType,jdbcType=INTEGER},
		bank_user = #{bankUser,jdbcType=VARCHAR},
		deposit_bank = #{depositBank,jdbcType=VARCHAR},
		bank_account = #{bankAccount,jdbcType=VARCHAR},
		supplier_state = #{supplierState,jdbcType=INTEGER},
		supplier_note = #{supplierNote,jdbcType=VARCHAR},
		data_from = #{dataFrom,jdbcType=INTEGER}
		where supplier_id = #{supplierId,jdbcType=VARCHAR}
	</update>
	<insert id="batchInsert" useGeneratedKeys="true" parameterType="java.util.List">
		insert into dat_supplier (supplier_id, prv_id, prv_sname,
		preg_id, preg_name, reg_id,
		reg_name, is_downshare, supplier_code,
		supplier_name, supplier_site, supplier_address,
		supplier_contact, supplier_telephone, supplier_type,
		account_type, bank_user, deposit_bank,
		bank_account, supplier_state, supplier_note,
		data_from, create_time, create_user, create_ip)
		values
		<foreach collection="list" item="item" index="index"
			separator=",">
			(#{item.supplierId,jdbcType=VARCHAR}, #{item.prvId,jdbcType=VARCHAR}, #{item.prvSname,jdbcType=VARCHAR},
			#{item.pregId,jdbcType=VARCHAR}, #{item.pregName,jdbcType=VARCHAR},
			#{item.regId,jdbcType=VARCHAR},
			#{item.regName,jdbcType=VARCHAR}, #{item.isDownshare,jdbcType=INTEGER},
			#{item.supplierCode,jdbcType=VARCHAR},
			#{item.supplierName,jdbcType=VARCHAR},
			#{item.supplierSite,jdbcType=VARCHAR},
			#{item.supplierAddress,jdbcType=VARCHAR},
			#{item.supplierContact,jdbcType=VARCHAR},
			#{item.supplierTelephone,jdbcType=VARCHAR},
			#{item.supplierType,jdbcType=INTEGER},
			#{item.accountType,jdbcType=INTEGER},
			#{item.bankUser,jdbcType=VARCHAR},
			#{item.depositBank,jdbcType=VARCHAR},
			#{item.bankAccount,jdbcType=VARCHAR},
			#{item.supplierState,jdbcType=INTEGER},
			#{item.supplierNote,jdbcType=VARCHAR},
			#{item.dataFrom,jdbcType=INTEGER},#{item.create_time,jdbcType=TIMESTAMP},
			#{item.create_user,jdbcType=VARCHAR},#{item.create_ip,jdbcType=VARCHAR})
		</foreach>
	</insert>
	<update id="batchUpdate" parameterType="com.xunge.model.basedata.DatSupplierVO">
		<foreach collection="list" item="item" index="index" open=""
			close="" separator=";">
			update dat_supplier
			<set>
				update_time = #{item.update_time,jdbcType=TIMESTAMP},
				update_user = #{item.update_user,jdbcType=VARCHAR},
				update_ip = #{item.update_ip,jdbcType=VARCHAR},
				prv_id = #{item.prvId,jdbcType=VARCHAR},
				prv_sname = #{item.prvSname,jdbcType=VARCHAR},
				preg_id = #{item.pregId,jdbcType=VARCHAR},
				preg_name = #{item.pregName,jdbcType=VARCHAR},
				reg_id = #{item.regId,jdbcType=VARCHAR},
				reg_name = #{item.regName,jdbcType=VARCHAR},
				supplier_name = #{item.supplierName,jdbcType=VARCHAR},
				supplier_site = #{item.supplierSite,jdbcType=VARCHAR},
				supplier_address = #{item.supplierAddress,jdbcType=VARCHAR},
				supplier_contact = #{item.supplierContact,jdbcType=VARCHAR},
				supplier_telephone = #{item.supplierTelephone,jdbcType=VARCHAR},
				supplier_type = #{item.supplierType,jdbcType=INTEGER},
				account_type = #{item.accountType,jdbcType=INTEGER},
				bank_user = #{item.bankUser,jdbcType=VARCHAR},
				deposit_bank = #{item.depositBank,jdbcType=VARCHAR},
				bank_account = #{item.bankAccount,jdbcType=VARCHAR},
				supplier_note = #{item.supplierNote,jdbcType=VARCHAR}
			</set>
			where supplier_code = #{item.supplierCode,jdbcType=VARCHAR}
			and supplier_state = #{item.supplierState,jdbcType=INTEGER}
		</foreach>
	</update>
	<select id="selectRedisComStringByPrvId" resultType="map"
			parameterType="java.lang.String">
		select
			concat(IFNULL(dt.prv_id,''),'\\|',IFNULL(dt.supplier_code,''),'\\|',IFNULL(dt.supplier_site,'')) as comkey,
			concat(IFNULL(dt.supplier_id,''),'\\|',IFNULL(dt.supplier_name,'')) as comval
		from dat_supplier dt
		where dt.prv_id = #{prv_id,jdbcType=VARCHAR}
			and dt.data_from = 2
	</select>
</mapper>