<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xunge.dao.basedata.ring.MeterPerfVOMapper" >
  <resultMap id="BaseResultMap" type="com.xunge.model.basedata.ring.MeterPerfVO" >
    <id column="meter_id" property="meterId" jdbcType="VARCHAR" />
    <result column="prv_id" property="prvId" jdbcType="VARCHAR" />
    <result column="prv_sname" property="prvSname" jdbcType="VARCHAR" />
    <result column="resource_type" property="resourceType" jdbcType="INTEGER" />
    <result column="resource_code" property="resourceCode" jdbcType="VARCHAR" />
    <result column="code_type" property="codeType" jdbcType="INTEGER" />
    <result column="resource_name" property="resourceName" jdbcType="VARCHAR" />
    <result column="preg_id" property="pregId" jdbcType="VARCHAR" />
    <result column="preg_name" property="pregName" jdbcType="VARCHAR" />
    <result column="reg_id" property="regId" jdbcType="VARCHAR" />
    <result column="reg_name" property="regName" jdbcType="VARCHAR" />
    <result column="start_time" property="startTime" jdbcType="TIMESTAMP" />
    <result column="stop_time" property="stopTime" jdbcType="TIMESTAMP" />
    <result column="total_degree" property="totalDegree" jdbcType="REAL" />
    <result column="total_state" property="totalState" jdbcType="INTEGER" />
    <result column="equipment_degree" property="equipmentDegree" jdbcType="REAL" />
    <result column="equipment_state" property="equipmentState" jdbcType="INTEGER" />
    <result column="ac_degree" property="acDegree" jdbcType="REAL" />
    <result column="ac_state" property="acState" jdbcType="INTEGER" />
    <result column="ex_tempreture" property="exTempreture" jdbcType="REAL" />
    <result column="in_tempreture" property="inTempreture" jdbcType="REAL" />
  </resultMap>
  
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    meter_id, prv_id, prv_sname, resource_type, resource_code, code_type, resource_name, 
    preg_id, preg_name, reg_id, reg_name, start_time, stop_time, total_degree, total_state, 
    equipment_degree, equipment_state, ac_degree, ac_state, ex_tempreture, in_tempreture
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.xunge.model.basedata.ring.MeterPerfVOExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from performance_meter
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from performance_meter
    where meter_id = #{meterId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from performance_meter
    where meter_id = #{meterId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.xunge.model.basedata.ring.MeterPerfVOExample" >
    delete from performance_meter
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xunge.model.basedata.ring.MeterPerfVO" >
    insert into performance_meter (meter_id, prv_id, prv_sname, 
      resource_type, resource_code, code_type, 
      resource_name, preg_id, preg_name, 
      reg_id, reg_name, start_time, 
      stop_time, total_degree, total_state, 
      equipment_degree, equipment_state, ac_degree, 
      ac_state, ex_tempreture, in_tempreture
      )
    values (#{meterId,jdbcType=VARCHAR}, #{prvId,jdbcType=VARCHAR}, #{prvSname,jdbcType=VARCHAR}, 
      #{resourceType,jdbcType=INTEGER}, #{resourceCode,jdbcType=VARCHAR}, #{codeType,jdbcType=INTEGER}, 
      #{resourceName,jdbcType=VARCHAR}, #{pregId,jdbcType=VARCHAR}, #{pregName,jdbcType=VARCHAR}, 
      #{regId,jdbcType=VARCHAR}, #{regName,jdbcType=VARCHAR}, #{startTime,jdbcType=TIMESTAMP}, 
      #{stopTime,jdbcType=TIMESTAMP}, #{totalDegree,jdbcType=REAL}, #{totalState,jdbcType=INTEGER}, 
      #{equipmentDegree,jdbcType=REAL}, #{equipmentState,jdbcType=INTEGER}, #{acDegree,jdbcType=REAL}, 
      #{acState,jdbcType=INTEGER}, #{exTempreture,jdbcType=REAL}, #{inTempreture,jdbcType=REAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.xunge.model.basedata.ring.MeterPerfVO" >
    insert into performance_meter
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="meterId != null" >
        meter_id,
      </if>
      <if test="prvId != null" >
        prv_id,
      </if>
      <if test="prvSname != null" >
        prv_sname,
      </if>
      <if test="resourceType != null" >
        resource_type,
      </if>
      <if test="resourceCode != null" >
        resource_code,
      </if>
      <if test="codeType != null" >
        code_type,
      </if>
      <if test="resourceName != null" >
        resource_name,
      </if>
      <if test="pregId != null" >
        preg_id,
      </if>
      <if test="pregName != null" >
        preg_name,
      </if>
      <if test="regId != null" >
        reg_id,
      </if>
      <if test="regName != null" >
        reg_name,
      </if>
      <if test="startTime != null" >
        start_time,
      </if>
      <if test="stopTime != null" >
        stop_time,
      </if>
      <if test="totalDegree != null" >
        total_degree,
      </if>
      <if test="totalState != null" >
        total_state,
      </if>
      <if test="equipmentDegree != null" >
        equipment_degree,
      </if>
      <if test="equipmentState != null" >
        equipment_state,
      </if>
      <if test="acDegree != null" >
        ac_degree,
      </if>
      <if test="acState != null" >
        ac_state,
      </if>
      <if test="exTempreture != null" >
        ex_tempreture,
      </if>
      <if test="inTempreture != null" >
        in_tempreture,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="meterId != null" >
        #{meterId,jdbcType=VARCHAR},
      </if>
      <if test="prvId != null" >
        #{prvId,jdbcType=VARCHAR},
      </if>
      <if test="prvSname != null" >
        #{prvSname,jdbcType=VARCHAR},
      </if>
      <if test="resourceType != null" >
        #{resourceType,jdbcType=INTEGER},
      </if>
      <if test="resourceCode != null" >
        #{resourceCode,jdbcType=VARCHAR},
      </if>
      <if test="codeType != null" >
        #{codeType,jdbcType=INTEGER},
      </if>
      <if test="resourceName != null" >
        #{resourceName,jdbcType=VARCHAR},
      </if>
      <if test="pregId != null" >
        #{pregId,jdbcType=VARCHAR},
      </if>
      <if test="pregName != null" >
        #{pregName,jdbcType=VARCHAR},
      </if>
      <if test="regId != null" >
        #{regId,jdbcType=VARCHAR},
      </if>
      <if test="regName != null" >
        #{regName,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null" >
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="stopTime != null" >
        #{stopTime,jdbcType=TIMESTAMP},
      </if>
      <if test="totalDegree != null" >
        #{totalDegree,jdbcType=REAL},
      </if>
      <if test="totalState != null" >
        #{totalState,jdbcType=INTEGER},
      </if>
      <if test="equipmentDegree != null" >
        #{equipmentDegree,jdbcType=REAL},
      </if>
      <if test="equipmentState != null" >
        #{equipmentState,jdbcType=INTEGER},
      </if>
      <if test="acDegree != null" >
        #{acDegree,jdbcType=REAL},
      </if>
      <if test="acState != null" >
        #{acState,jdbcType=INTEGER},
      </if>
      <if test="exTempreture != null" >
        #{exTempreture,jdbcType=REAL},
      </if>
      <if test="inTempreture != null" >
        #{inTempreture,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xunge.model.basedata.ring.MeterPerfVOExample" resultType="java.lang.Integer" >
    select count(*) from performance_meter
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update performance_meter
    <set >
      <if test="record.meterId != null" >
        meter_id = #{record.meterId,jdbcType=VARCHAR},
      </if>
      <if test="record.prvId != null" >
        prv_id = #{record.prvId,jdbcType=VARCHAR},
      </if>
      <if test="record.prvSname != null" >
        prv_sname = #{record.prvSname,jdbcType=VARCHAR},
      </if>
      <if test="record.resourceType != null" >
        resource_type = #{record.resourceType,jdbcType=INTEGER},
      </if>
      <if test="record.resourceCode != null" >
        resource_code = #{record.resourceCode,jdbcType=VARCHAR},
      </if>
      <if test="record.codeType != null" >
        code_type = #{record.codeType,jdbcType=INTEGER},
      </if>
      <if test="record.resourceName != null" >
        resource_name = #{record.resourceName,jdbcType=VARCHAR},
      </if>
      <if test="record.pregId != null" >
        preg_id = #{record.pregId,jdbcType=VARCHAR},
      </if>
      <if test="record.pregName != null" >
        preg_name = #{record.pregName,jdbcType=VARCHAR},
      </if>
      <if test="record.regId != null" >
        reg_id = #{record.regId,jdbcType=VARCHAR},
      </if>
      <if test="record.regName != null" >
        reg_name = #{record.regName,jdbcType=VARCHAR},
      </if>
      <if test="record.startTime != null" >
        start_time = #{record.startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.stopTime != null" >
        stop_time = #{record.stopTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.totalDegree != null" >
        total_degree = #{record.totalDegree,jdbcType=REAL},
      </if>
      <if test="record.totalState != null" >
        total_state = #{record.totalState,jdbcType=INTEGER},
      </if>
      <if test="record.equipmentDegree != null" >
        equipment_degree = #{record.equipmentDegree,jdbcType=REAL},
      </if>
      <if test="record.equipmentState != null" >
        equipment_state = #{record.equipmentState,jdbcType=INTEGER},
      </if>
      <if test="record.acDegree != null" >
        ac_degree = #{record.acDegree,jdbcType=REAL},
      </if>
      <if test="record.acState != null" >
        ac_state = #{record.acState,jdbcType=INTEGER},
      </if>
      <if test="record.exTempreture != null" >
        ex_tempreture = #{record.exTempreture,jdbcType=REAL},
      </if>
      <if test="record.inTempreture != null" >
        in_tempreture = #{record.inTempreture,jdbcType=REAL},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update performance_meter
    set meter_id = #{record.meterId,jdbcType=VARCHAR},
      prv_id = #{record.prvId,jdbcType=VARCHAR},
      prv_sname = #{record.prvSname,jdbcType=VARCHAR},
      resource_type = #{record.resourceType,jdbcType=INTEGER},
      resource_code = #{record.resourceCode,jdbcType=VARCHAR},
      code_type = #{record.codeType,jdbcType=INTEGER},
      resource_name = #{record.resourceName,jdbcType=VARCHAR},
      preg_id = #{record.pregId,jdbcType=VARCHAR},
      preg_name = #{record.pregName,jdbcType=VARCHAR},
      reg_id = #{record.regId,jdbcType=VARCHAR},
      reg_name = #{record.regName,jdbcType=VARCHAR},
      start_time = #{record.startTime,jdbcType=TIMESTAMP},
      stop_time = #{record.stopTime,jdbcType=TIMESTAMP},
      total_degree = #{record.totalDegree,jdbcType=REAL},
      total_state = #{record.totalState,jdbcType=INTEGER},
      equipment_degree = #{record.equipmentDegree,jdbcType=REAL},
      equipment_state = #{record.equipmentState,jdbcType=INTEGER},
      ac_degree = #{record.acDegree,jdbcType=REAL},
      ac_state = #{record.acState,jdbcType=INTEGER},
      ex_tempreture = #{record.exTempreture,jdbcType=REAL},
      in_tempreture = #{record.inTempreture,jdbcType=REAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xunge.model.basedata.ring.MeterPerfVO" >
    update performance_meter
    <set >
      <if test="prvId != null" >
        prv_id = #{prvId,jdbcType=VARCHAR},
      </if>
      <if test="prvSname != null" >
        prv_sname = #{prvSname,jdbcType=VARCHAR},
      </if>
      <if test="resourceType != null" >
        resource_type = #{resourceType,jdbcType=INTEGER},
      </if>
      <if test="resourceCode != null" >
        resource_code = #{resourceCode,jdbcType=VARCHAR},
      </if>
      <if test="codeType != null" >
        code_type = #{codeType,jdbcType=INTEGER},
      </if>
      <if test="resourceName != null" >
        resource_name = #{resourceName,jdbcType=VARCHAR},
      </if>
      <if test="pregId != null" >
        preg_id = #{pregId,jdbcType=VARCHAR},
      </if>
      <if test="pregName != null" >
        preg_name = #{pregName,jdbcType=VARCHAR},
      </if>
      <if test="regId != null" >
        reg_id = #{regId,jdbcType=VARCHAR},
      </if>
      <if test="regName != null" >
        reg_name = #{regName,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null" >
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="stopTime != null" >
        stop_time = #{stopTime,jdbcType=TIMESTAMP},
      </if>
      <if test="totalDegree != null" >
        total_degree = #{totalDegree,jdbcType=REAL},
      </if>
      <if test="totalState != null" >
        total_state = #{totalState,jdbcType=INTEGER},
      </if>
      <if test="equipmentDegree != null" >
        equipment_degree = #{equipmentDegree,jdbcType=REAL},
      </if>
      <if test="equipmentState != null" >
        equipment_state = #{equipmentState,jdbcType=INTEGER},
      </if>
      <if test="acDegree != null" >
        ac_degree = #{acDegree,jdbcType=REAL},
      </if>
      <if test="acState != null" >
        ac_state = #{acState,jdbcType=INTEGER},
      </if>
      <if test="exTempreture != null" >
        ex_tempreture = #{exTempreture,jdbcType=REAL},
      </if>
      <if test="inTempreture != null" >
        in_tempreture = #{inTempreture,jdbcType=REAL},
      </if>
    </set>
    where meter_id = #{meterId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xunge.model.basedata.ring.MeterPerfVO" >
    update performance_meter
    set prv_id = #{prvId,jdbcType=VARCHAR},
      prv_sname = #{prvSname,jdbcType=VARCHAR},
      resource_type = #{resourceType,jdbcType=INTEGER},
      resource_code = #{resourceCode,jdbcType=VARCHAR},
      code_type = #{codeType,jdbcType=INTEGER},
      resource_name = #{resourceName,jdbcType=VARCHAR},
      preg_id = #{pregId,jdbcType=VARCHAR},
      preg_name = #{pregName,jdbcType=VARCHAR},
      reg_id = #{regId,jdbcType=VARCHAR},
      reg_name = #{regName,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      stop_time = #{stopTime,jdbcType=TIMESTAMP},
      total_degree = #{totalDegree,jdbcType=REAL},
      total_state = #{totalState,jdbcType=INTEGER},
      equipment_degree = #{equipmentDegree,jdbcType=REAL},
      equipment_state = #{equipmentState,jdbcType=INTEGER},
      ac_degree = #{acDegree,jdbcType=REAL},
      ac_state = #{acState,jdbcType=INTEGER},
      ex_tempreture = #{exTempreture,jdbcType=REAL},
      in_tempreture = #{inTempreture,jdbcType=REAL}
    where meter_id = #{meterId,jdbcType=VARCHAR}
  </update>
  
         <insert id="batchInsert" useGeneratedKeys="true" parameterType="java.util.List">  
<!--     <selectKey resultType="long" keyProperty="id" order="AFTER">  
        SELECT  
        LAST_INSERT_ID()  
    </selectKey> -->  
            insert into performance_meter (meter_id, prv_id, prv_sname, 
      resource_type, resource_code, code_type, 
      resource_name, preg_id, preg_name, 
      reg_id, reg_name, start_time, 
      stop_time, total_degree, total_state, 
      equipment_degree, equipment_state, ac_degree, 
      ac_state, ex_tempreture, in_tempreture
      , create_time, create_user, create_ip)
    values 
    <foreach collection="list" item="item" index="index" separator="," >  
      (#{item.meterId,jdbcType=VARCHAR}, #{item.prvId,jdbcType=VARCHAR},#{item.prvSname,jdbcType=VARCHAR}, #{item.resourceType,jdbcType=INTEGER}, 
      #{item.resourceCode,jdbcType=VARCHAR}, #{item.codeType,jdbcType=INTEGER}, #{item.resourceName,jdbcType=VARCHAR}, 
      #{item.pregId,jdbcType=VARCHAR}, #{item.pregName,jdbcType=VARCHAR}, #{item.regId,jdbcType=VARCHAR}, 
      #{item.regName,jdbcType=VARCHAR}, #{item.startTime,jdbcType=TIMESTAMP}, #{item.stopTime,jdbcType=TIMESTAMP}, 
      #{item.totalDegree,jdbcType=REAL}, #{item.totalState,jdbcType=INTEGER}, #{item.equipmentDegree,jdbcType=REAL}, 
      #{item.equipmentState,jdbcType=INTEGER}, #{item.acDegree,jdbcType=REAL}, #{item.acState,jdbcType=INTEGER}, 
      #{item.exTempreture,jdbcType=REAL}, #{item.inTempreture,jdbcType=REAL},#{item.create_time,jdbcType=TIMESTAMP}, #{item.create_user,jdbcType=VARCHAR}, #{item.create_ip,jdbcType=VARCHAR})
    </foreach>  
</insert>
  
    <update id="batchUpdate"  parameterType="java.util.List">
	      <foreach collection="list" item="item" index="index" open="" close="" separator=";">
				update performance_meter 
				<set>
		    	update_time = #{item.update_time,jdbcType=TIMESTAMP},
			    update_user = #{item.update_user,jdbcType=VARCHAR},
			    update_ip = #{item.update_ip,jdbcType=VARCHAR},
				prv_id = #{item.prvId,jdbcType=VARCHAR},
				prv_sname = #{item.prvSname,jdbcType=VARCHAR},
                resource_type = #{item.resourceType,jdbcType=INTEGER},
                resource_code = #{item.resourceCode,jdbcType=VARCHAR},
                code_type = #{item.codeType,jdbcType=INTEGER},
                resource_name = #{item.resourceName,jdbcType=VARCHAR},
                preg_id = #{item.pregId,jdbcType=VARCHAR},
                preg_name = #{item.pregName,jdbcType=VARCHAR},
                reg_id = #{item.regId,jdbcType=VARCHAR},
                reg_name = #{item.regName,jdbcType=VARCHAR},
                start_time = #{item.startTime,jdbcType=TIMESTAMP},
                stop_time = #{item.stopTime,jdbcType=TIMESTAMP},
                total_degree = #{item.totalDegree,jdbcType=REAL},
                total_state = #{item.totalState,jdbcType=INTEGER},
                equipment_degree = #{item.equipmentDegree,jdbcType=REAL},
                equipment_state = #{item.equipmentState,jdbcType=INTEGER},
                ac_degree = #{item.acDegree,jdbcType=REAL},
                ac_state = #{item.acState,jdbcType=INTEGER},
                ex_tempreture = #{item.exTempreture,jdbcType=REAL},
                in_tempreture = #{item.inTempreture,jdbcType=REAL}
				</set>				
				where resource_code = #{item.resourceCode} AND prv_id = #{item.prvId}
		 </foreach>
    </update>
    <!--删除-->
    <delete id="delByCuidsAndPrvid" parameterType="java.util.Map">
        DELETE from performance_meter
        WHERE prv_id=#{prvId} AND resource_code IN
        <foreach collection="list" item="item"  index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>
    
   <select id="selectByCondition" resultMap="BaseResultMap" parameterType="com.xunge.model.basedata.ring.MeterPerfVO" >
    select 
    <include refid="Base_Column_List" />
    from performance_meter aa
    <trim prefix="WHERE" prefixOverrides="AND | OR">

        	<if test="prvId != '' and prvId != null">
                AND aa.prv_id = #{prvId}
            </if>
             <if test="pregId != '' and pregId != null">
                AND aa.preg_id = #{pregId}
            </if>
            <if test="regId != '' and regId != null">
                AND aa.reg_id = #{regId}
            </if>
            <if test="regId == '' or regId == null">
				AND aa.reg_id  in (
				select bb.reg_id from sys_userregion bb
				where bb.relation_state=0
					and bb.user_id = #{userId,jdbcType=VARCHAR}
				)
			</if>
            <if test="resourceType != '' and resourceType != null">
                AND aa.resource_type = #{resourceType}
            </if>
            <if test="resourceName != '' and resourceName != null">
                AND (aa.resource_name like #{resourceName} or aa.resource_code like #{resourceName})
            </if>
            <if test="queryDate != null ">
                AND  (aa.start_time like #{queryDate} or aa.stop_time like #{queryDate})
            </if>
        </trim>     
  </select>
  
   <resultMap id="RedisMap" type="com.xunge.model.basedata.ring.MeterPerfVO" >
    <result column="prv_id" property="prvId" jdbcType="VARCHAR" />
    <result column="prv_sname" property="prvSname" jdbcType="VARCHAR" />
    <result column="resource_type" property="resourceType" jdbcType="INTEGER" />
    <result column="resource_code" property="resourceCode" jdbcType="VARCHAR" />
    <result column="code_type" property="codeType" jdbcType="INTEGER" />
    <result column="resource_name" property="resourceName" jdbcType="VARCHAR" />
    <result column="start_time" property="startTime" jdbcType="TIMESTAMP" />
    <result column="stop_time" property="stopTime" jdbcType="TIMESTAMP" />
    <result column="total_degree" property="totalDegree" jdbcType="REAL" />
    <result column="total_state" property="totalState" jdbcType="INTEGER" />
    <result column="equipment_degree" property="equipmentDegree" jdbcType="REAL" />
    <result column="equipment_state" property="equipmentState" jdbcType="INTEGER" />
    <result column="ac_degree" property="acDegree" jdbcType="REAL" />
    <result column="ac_state" property="acState" jdbcType="INTEGER" />
    <result column="ex_tempreture" property="exTempreture" jdbcType="REAL" />
    <result column="in_tempreture" property="inTempreture" jdbcType="REAL" />
  </resultMap>
  
  <select id="selectForRedis" resultMap="RedisMap">
  select 
  prv_id,prv_sname,resource_type,resource_code,code_type,resource_name,start_time,stop_time,
  	total_degree,total_state,equipment_degree,equipment_state,ac_degree,ex_tempreture,in_tempreture
  	from performance_meter
  from performance_meter
  where prv_id = #{prvId,jdbcType=VARCHAR}
  </select>
</mapper>