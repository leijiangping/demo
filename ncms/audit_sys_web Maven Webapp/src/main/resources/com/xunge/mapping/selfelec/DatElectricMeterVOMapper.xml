<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xunge.dao.selfelec.electricmeter.DatElectricMeterVOMapper" >
  <resultMap id="BaseResultMap" type="com.xunge.model.selfelec.electricmeter.DatElectricMeterVO" >
    <id column="meter_id" property="meterId" jdbcType="VARCHAR" />
    <result column="prv_id" property="prvId" jdbcType="VARCHAR" />
    <result column="prv_sname" property="prvSname" jdbcType="VARCHAR" />
    <result column="preg_id" property="pregId" jdbcType="VARCHAR" />
    <result column="preg_name" property="pregName" jdbcType="VARCHAR" />
    <result column="reg_id" property="regId" jdbcType="VARCHAR" />
    <result column="reg_name" property="regName" jdbcType="VARCHAR" />
    <result column="meter_code" property="meterCode" jdbcType="VARCHAR" />
    <result column="initial_value" property="initialValue" jdbcType="DECIMAL" />
    <result column="upper_value" property="upperValue" jdbcType="DECIMAL" />
    <result column="flat_value" property="flatValue" jdbcType="DECIMAL" />
    <result column="peak_value" property="peakValue" jdbcType="DECIMAL" />
    <result column="top_value" property="topValue" jdbcType="DECIMAL" />
    <result column="valley_value" property="valleyValue" jdbcType="DECIMAL" />
    <result column="flat_upper_value" property="flatUpperValue" jdbcType="DECIMAL" />
    <result column="peak_upper_value" property="peakUpperValue" jdbcType="DECIMAL" />
    <result column="valley_upper_value" property="valleyUpperValue" jdbcType="DECIMAL" />
    <result column="top_upper_value" property="topUpperValue" jdbcType="DECIMAL" />
    <result column="meter_type" property="meterType" jdbcType="INTEGER" />
    <result column="electricmeter_multiply" property="electricmeterMultiply" jdbcType="DECIMAL" />
    <result column="account_number" property="accountNumber" jdbcType="VARCHAR" />
    <result column="install_date" property="installDate" jdbcType="TIMESTAMP" />
    <result column="meter_state" property="meterState" jdbcType="INTEGER" />
    <result column="is_share" property="isShare" jdbcType="INTEGER" />
    <result column="meter_note" property="meterNote" jdbcType="VARCHAR" />
    <result column="data_from" property="dataFrom" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    meter_id, prv_id, prv_sname, preg_id, preg_name, reg_id, reg_name, meter_code, initial_value, 
    upper_value, flat_value, peak_value, top_value, valley_value, flat_upper_value, peak_upper_value, 
    valley_upper_value, top_upper_value, meter_type, electricmeter_multiply, account_number, 
    install_date, meter_state, is_share, meter_note, data_from
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.xunge.model.selfelec.electricmeter.DatElectricMeterVOExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from dat_electricmeter
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from dat_electricmeter
    where meter_id = #{meterId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from dat_electricmeter
    where meter_id = #{meterId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.xunge.model.selfelec.electricmeter.DatElectricMeterVOExample" >
    delete from dat_electricmeter
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xunge.model.selfelec.electricmeter.DatElectricMeterVO" >
    insert into dat_electricmeter (meter_id, prv_id, prv_sname, 
      preg_id, preg_name, reg_id, 
      reg_name, meter_code, initial_value, 
      upper_value, flat_value, peak_value, 
      top_value, valley_value, flat_upper_value, 
      peak_upper_value, valley_upper_value, top_upper_value, 
      meter_type, electricmeter_multiply, account_number, 
      install_date, meter_state, is_share, 
      meter_note, data_from)
    values (#{meterId,jdbcType=VARCHAR}, #{prvId,jdbcType=VARCHAR}, #{prvSname,jdbcType=VARCHAR}, 
      #{pregId,jdbcType=VARCHAR}, #{pregName,jdbcType=VARCHAR}, #{regId,jdbcType=VARCHAR}, 
      #{regName,jdbcType=VARCHAR}, #{meterCode,jdbcType=VARCHAR}, #{initialValue,jdbcType=DECIMAL}, 
      #{upperValue,jdbcType=DECIMAL}, #{flatValue,jdbcType=DECIMAL}, #{peakValue,jdbcType=DECIMAL}, 
      #{topValue,jdbcType=DECIMAL}, #{valleyValue,jdbcType=DECIMAL}, #{flatUpperValue,jdbcType=DECIMAL}, 
      #{peakUpperValue,jdbcType=DECIMAL}, #{valleyUpperValue,jdbcType=DECIMAL}, #{topUpperValue,jdbcType=DECIMAL}, 
      #{meterType,jdbcType=INTEGER}, #{electricmeterMultiply,jdbcType=DECIMAL}, #{accountNumber,jdbcType=VARCHAR}, 
      #{installDate,jdbcType=TIMESTAMP}, #{meterState,jdbcType=INTEGER}, #{isShare,jdbcType=INTEGER}, 
      #{meterNote,jdbcType=VARCHAR}, #{dataFrom,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.xunge.model.selfelec.electricmeter.DatElectricMeterVO" >
    insert into dat_electricmeter
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="meterId != null" >
        meter_id,
      </if>
      <if test="prvId != null" >
        prv_id,
      </if>
      <if test="pregId != null" >
        preg_id,
      </if>
      <if test="regId != null" >
        reg_id,
      </if>
      <if test="meterCode != null" >
        meter_code,
      </if>
      <if test="initialValue != null" >
        initial_value,
      </if>
      <if test="upperValue != null" >
        upper_value,
      </if>
      <if test="flatValue != null" >
        flat_value,
      </if>
      <if test="peakValue != null" >
        peak_value,
      </if>
      <if test="topValue != null" >
        top_value,
      </if>
      <if test="valleyValue != null" >
        valley_value,
      </if>
      <if test="flatUpperValue != null" >
        flat_upper_value,
      </if>
      <if test="peakUpperValue != null" >
        peak_upper_value,
      </if>
      <if test="valleyUpperValue != null" >
        valley_upper_value,
      </if>
      <if test="topUpperValue != null" >
        top_upper_value,
      </if>
      <if test="meterType != null" >
        meter_type,
      </if>
      <if test="electricmeterMultiply != null" >
        electricmeter_multiply,
      </if>
      <if test="accountNumber != null" >
        account_number,
      </if>
      <if test="installDate != null" >
        install_date,
      </if>
      <if test="meterState != null" >
        meter_state,
      </if>
      <if test="isShare != null" >
        is_share,
      </if>
      <if test="meterNote != null" >
        meter_note,
      </if>
      <if test="dataFrom != null" >
        data_from,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="meterId != null" >
        #{meterId,jdbcType=VARCHAR},
      </if>
      <if test="prvId != null" >
        #{prvId,jdbcType=VARCHAR},
      </if>
      <if test="pregId != null" >
        #{pregId,jdbcType=VARCHAR},
      </if>
      <if test="regId != null" >
        #{regId,jdbcType=VARCHAR},
      </if>
      <if test="meterCode != null" >
        #{meterCode,jdbcType=VARCHAR},
      </if>
      <if test="initialValue != null" >
        #{initialValue,jdbcType=DECIMAL},
      </if>
      <if test="upperValue != null" >
        #{upperValue,jdbcType=DECIMAL},
      </if>
      <if test="flatValue != null" >
        #{flatValue,jdbcType=DECIMAL},
      </if>
      <if test="peakValue != null" >
        #{peakValue,jdbcType=DECIMAL},
      </if>
      <if test="topValue != null" >
        #{topValue,jdbcType=DECIMAL},
      </if>
      <if test="valleyValue != null" >
        #{valleyValue,jdbcType=DECIMAL},
      </if>
      <if test="flatUpperValue != null" >
        #{flatUpperValue,jdbcType=DECIMAL},
      </if>
      <if test="peakUpperValue != null" >
        #{peakUpperValue,jdbcType=DECIMAL},
      </if>
      <if test="valleyUpperValue != null" >
        #{valleyUpperValue,jdbcType=DECIMAL},
      </if>
      <if test="topUpperValue != null" >
        #{topUpperValue,jdbcType=DECIMAL},
      </if>
      <if test="meterType != null" >
        #{meterType,jdbcType=INTEGER},
      </if>
      <if test="electricmeterMultiply != null" >
        #{electricmeterMultiply,jdbcType=DECIMAL},
      </if>
      <if test="accountNumber != null" >
        #{accountNumber,jdbcType=VARCHAR},
      </if>
      <if test="installDate != null" >
        #{installDate,jdbcType=TIMESTAMP},
      </if>
      <if test="meterState != null" >
        #{meterState,jdbcType=INTEGER},
      </if>
      <if test="isShare != null" >
        #{isShare,jdbcType=INTEGER},
      </if>
      <if test="meterNote != null" >
        #{meterNote,jdbcType=VARCHAR},
      </if>
      <if test="dataFrom != null" >
        #{dataFrom,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xunge.model.selfelec.electricmeter.DatElectricMeterVOExample" resultType="java.lang.Integer" >
    select count(*) from dat_electricmeter
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update dat_electricmeter
    <set >
      <if test="record.meterId != null" >
        meter_id = #{record.meterId,jdbcType=VARCHAR},
      </if>
      <if test="record.prvId != null" >
        prv_id = #{record.prvId,jdbcType=VARCHAR},
      </if>
      <if test="record.prvSname != null" >
        prv_sname = #{record.prvSname,jdbcType=VARCHAR},
      </if>
      <if test="record.pregId != null" >
        preg_id = #{record.pregId,jdbcType=VARCHAR},
      </if>
      <if test="record.pregName != null" >
        preg_name = #{record.pregName,jdbcType=VARCHAR},
      </if>
      <if test="record.regId != null" >
        reg_id = #{record.regId,jdbcType=VARCHAR},
      </if>
      <if test="record.regName != null" >
        reg_name = #{record.regName,jdbcType=VARCHAR},
      </if>
      <if test="record.meterCode != null" >
        meter_code = #{record.meterCode,jdbcType=VARCHAR},
      </if>
      <if test="record.initialValue != null" >
        initial_value = #{record.initialValue,jdbcType=DECIMAL},
      </if>
      <if test="record.upperValue != null" >
        upper_value = #{record.upperValue,jdbcType=DECIMAL},
      </if>
      <if test="record.flatValue != null" >
        flat_value = #{record.flatValue,jdbcType=DECIMAL},
      </if>
      <if test="record.peakValue != null" >
        peak_value = #{record.peakValue,jdbcType=DECIMAL},
      </if>
      <if test="record.topValue != null" >
        top_value = #{record.topValue,jdbcType=DECIMAL},
      </if>
      <if test="record.valleyValue != null" >
        valley_value = #{record.valleyValue,jdbcType=DECIMAL},
      </if>
      <if test="record.flatUpperValue != null" >
        flat_upper_value = #{record.flatUpperValue,jdbcType=DECIMAL},
      </if>
      <if test="record.peakUpperValue != null" >
        peak_upper_value = #{record.peakUpperValue,jdbcType=DECIMAL},
      </if>
      <if test="record.valleyUpperValue != null" >
        valley_upper_value = #{record.valleyUpperValue,jdbcType=DECIMAL},
      </if>
      <if test="record.topUpperValue != null" >
        top_upper_value = #{record.topUpperValue,jdbcType=DECIMAL},
      </if>
      <if test="record.meterType != null" >
        meter_type = #{record.meterType,jdbcType=INTEGER},
      </if>
      <if test="record.electricmeterMultiply != null" >
        electricmeter_multiply = #{record.electricmeterMultiply,jdbcType=DECIMAL},
      </if>
      <if test="record.accountNumber != null" >
        account_number = #{record.accountNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.installDate != null" >
        install_date = #{record.installDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.meterState != null" >
        meter_state = #{record.meterState,jdbcType=INTEGER},
      </if>
      <if test="record.isShare != null" >
        is_share = #{record.isShare,jdbcType=INTEGER},
      </if>
      <if test="record.meterNote != null" >
        meter_note = #{record.meterNote,jdbcType=VARCHAR},
      </if>
      <if test="record.dataFrom != null" >
        data_from = #{record.dataFrom,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <!-- 设置电表状态   yuefy -->
    <update id="updateMeterState" parameterType="map" >
    update dat_electricmeter
    set  meter_state = #{meterState,jdbcType=INTEGER}
    WHERE meter_id IN
        <foreach collection="array" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
  </update>
  
  <update id="updateByExample" parameterType="map" >
    update dat_electricmeter
    set meter_id = #{record.meterId,jdbcType=VARCHAR},
      prv_id = #{record.prvId,jdbcType=VARCHAR},
      prv_sname = #{record.prvSname,jdbcType=VARCHAR},
      preg_id = #{record.pregId,jdbcType=VARCHAR},
      preg_name = #{record.pregName,jdbcType=VARCHAR},
      reg_id = #{record.regId,jdbcType=VARCHAR},
      reg_name = #{record.regName,jdbcType=VARCHAR},
      meter_code = #{record.meterCode,jdbcType=VARCHAR},
      initial_value = #{record.initialValue,jdbcType=DECIMAL},
      upper_value = #{record.upperValue,jdbcType=DECIMAL},
      flat_value = #{record.flatValue,jdbcType=DECIMAL},
      peak_value = #{record.peakValue,jdbcType=DECIMAL},
      top_value = #{record.topValue,jdbcType=DECIMAL},
      valley_value = #{record.valleyValue,jdbcType=DECIMAL},
      flat_upper_value = #{record.flatUpperValue,jdbcType=DECIMAL},
      peak_upper_value = #{record.peakUpperValue,jdbcType=DECIMAL},
      valley_upper_value = #{record.valleyUpperValue,jdbcType=DECIMAL},
      top_upper_value = #{record.topUpperValue,jdbcType=DECIMAL},
      meter_type = #{record.meterType,jdbcType=INTEGER},
      electricmeter_multiply = #{record.electricmeterMultiply,jdbcType=DECIMAL},
      account_number = #{record.accountNumber,jdbcType=VARCHAR},
      install_date = #{record.installDate,jdbcType=TIMESTAMP},
      meter_state = #{record.meterState,jdbcType=INTEGER},
      is_share = #{record.isShare,jdbcType=INTEGER},
      meter_note = #{record.meterNote,jdbcType=VARCHAR},
      data_from = #{record.dataFrom,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xunge.model.selfelec.electricmeter.DatElectricMeterVO" >
    update dat_electricmeter
    <set>
      <if test="regId != null" >
        reg_id = #{regId,jdbcType=VARCHAR},
      </if>
      <if test="meterCode != null" >
        meter_code = #{meterCode,jdbcType=VARCHAR},
      </if>
      <if test="initialValue != null" >
        initial_value = #{initialValue,jdbcType=DECIMAL},
      </if>
      <if test="upperValue != null" >
        upper_value = #{upperValue,jdbcType=DECIMAL},
      </if>
      <if test="flatValue != null" >
        flat_value = #{flatValue,jdbcType=DECIMAL},
      </if>
      <if test="peakValue != null" >
        peak_value = #{peakValue,jdbcType=DECIMAL},
      </if>
      <if test="topValue != null" >
        top_value = #{topValue,jdbcType=DECIMAL},
      </if>
      <if test="valleyValue != null" >
        valley_value = #{valleyValue,jdbcType=DECIMAL},
      </if>
      <if test="flatUpperValue != null" >
        flat_upper_value = #{flatUpperValue,jdbcType=DECIMAL},
      </if>
      <if test="peakUpperValue != null" >
        peak_upper_value = #{peakUpperValue,jdbcType=DECIMAL},
      </if>
      <if test="valleyUpperValue != null" >
        valley_upper_value = #{valleyUpperValue,jdbcType=DECIMAL},
      </if>
      <if test="topUpperValue != null" >
        top_upper_value = #{topUpperValue,jdbcType=DECIMAL},
      </if>
      <if test="meterType != null" >
        meter_type = #{meterType,jdbcType=INTEGER},
      </if>
      <if test="electricmeterMultiply != null" >
        electricmeter_multiply = #{electricmeterMultiply,jdbcType=DECIMAL},
      </if>
      <if test="accountNumber != null" >
        account_number = #{accountNumber,jdbcType=VARCHAR},
      </if>
      <if test="installDate != null" >
        install_date = #{installDate,jdbcType=TIMESTAMP},
      </if>
      <if test="meterState != null" >
        meter_state = #{meterState,jdbcType=INTEGER},
      </if>
      <if test="isShare != null" >
        is_share = #{isShare,jdbcType=INTEGER},
      </if>
      <if test="meterNote != null" >
        meter_note = #{meterNote,jdbcType=VARCHAR},
      </if>
    </set>
    where meter_id = #{meterId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xunge.model.selfelec.electricmeter.DatElectricMeterVO" >
    update dat_electricmeter
    set prv_id = #{prvId,jdbcType=VARCHAR},
      prv_sname = #{prvSname,jdbcType=VARCHAR},
      preg_id = #{pregId,jdbcType=VARCHAR},
      preg_name = #{pregName,jdbcType=VARCHAR},
      reg_id = #{regId,jdbcType=VARCHAR},
      reg_name = #{regName,jdbcType=VARCHAR},
      meter_code = #{meterCode,jdbcType=VARCHAR},
      initial_value = #{initialValue,jdbcType=DECIMAL},
      upper_value = #{upperValue,jdbcType=DECIMAL},
      flat_value = #{flatValue,jdbcType=DECIMAL},
      peak_value = #{peakValue,jdbcType=DECIMAL},
      top_value = #{topValue,jdbcType=DECIMAL},
      valley_value = #{valleyValue,jdbcType=DECIMAL},
      flat_upper_value = #{flatUpperValue,jdbcType=DECIMAL},
      peak_upper_value = #{peakUpperValue,jdbcType=DECIMAL},
      valley_upper_value = #{valleyUpperValue,jdbcType=DECIMAL},
      top_upper_value = #{topUpperValue,jdbcType=DECIMAL},
      meter_type = #{meterType,jdbcType=INTEGER},
      electricmeter_multiply = #{electricmeterMultiply,jdbcType=DECIMAL},
      account_number = #{accountNumber,jdbcType=VARCHAR},
      install_date = #{installDate,jdbcType=TIMESTAMP},
      meter_state = #{meterState,jdbcType=INTEGER},
      is_share = #{isShare,jdbcType=INTEGER},
      meter_note = #{meterNote,jdbcType=VARCHAR},
      data_from = #{dataFrom,jdbcType=INTEGER}
    where meter_id = #{meterId,jdbcType=VARCHAR}
  </update>
  
   <select id="selectByCondition" resultMap="BaseResultMap" parameterType="com.xunge.model.selfelec.electricmeter.DatElectricMeterVO" >
    select 
   <include refid="Base_Column_List" />
    from dat_electricmeter aa
    <trim prefix="WHERE" prefixOverrides="AND | OR">
    	1 = 1
        	<if test="prvId != '' and prvId != null">
                AND aa.prv_id = #{prvId}
            </if>
            <if test="pregId != '' and pregId != null">
                AND aa.preg_id = #{pregId}
            </if>
            <if test="regId != '' and regId != null">
                AND aa.reg_id = #{regId}
            </if>
            <if test="regIds !=null and regIds.size()>0">
				AND aa.reg_id in 
				<foreach collection="regIds" item="item" index="index" open="(" separator="," close=")">  
	                #{item}
	            </foreach> 
            </if>
             <if test="meterState != null">
                AND aa.meter_state = #{meterState}
            </if>
             <if test="meterType != null">
                AND aa.meter_type = #{meterType}
            </if>
             <if test="meterCode != '' and meterCode != null">
                AND aa.meter_code like #{meterCode}
            </if>
            <if test="relateResState ==1 ">
                AND  aa.meter_id in (select bb.meter_id from ele_baseresourceelectricmeter bb where bb.relation_state = 0 and bb.meter_id is not null)
            </if>
             <if test="relateResState ==0 ">
                AND  aa.meter_id not in (select bb.meter_id from ele_baseresourceelectricmeter bb  where bb.relation_state = 0 and bb.meter_id is not null)
            </if>
            and aa.meter_state != -1
        </trim>     
  </select>
  
         <!--删除-->
    <delete id="delDatElectricMeter">
        DELETE from dat_electricmeter
        WHERE meter_id IN
        <foreach collection="array" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    
 <select id="selectByMeterCode" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from dat_electricmeter where meter_code=#{meterCode}
    and meter_state != -1
  </select>
  
   <select id="selectByMeterCodeMap" resultMap="BaseResultMap" parameterType="Map" >
    select 
    <include refid="Base_Column_List" />
    from dat_electricmeter where meter_code=#{meterCode}
    and meter_state != -1
    <if test="prvId != null and prvId != ''">
    	and prv_id = #{prvId}
    </if>
  </select>
  
 <select id="queryElecMeterId" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from dat_electricmeter where meter_id=#{meterId} and meter_state != -1
  </select>
  
 <select id="queryMeterNumByPrvid" parameterType="map" resultType="java.util.Map">
    SELECT
		<if test="reg_ids != null">
			reg.reg_name name,
		</if>
		<if test="prv_ids != null">
			prv.prv_sname name,
		</if>
			count(meters.reg_id) value
		FROM
			dat_electricmeter meters
		<if test="reg_ids != null">
			RIGHT JOIN sys_region reg ON reg.reg_id = meters.reg_id
		</if>
		<if test="prv_ids != null">
			RIGHT JOIN sys_province prv ON prv.prv_id = meters.prv_id
		</if>
		<where> 
			meters.meter_state=0<!-- 审核状态启用，电表状态正常 -->
			and meters.meter_state != -1
			<if test="prv_ids != null">
				and prv.prv_id in
				<foreach collection="prv_ids" item="item" index="index"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="reg_ids != null">
				and reg.reg_id in
				<foreach collection="reg_ids" item="item" index="index"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
		</where>
		GROUP BY
		<if test="reg_ids != null">
			reg.reg_id
		</if>
		<if test="prv_ids != null">
			prv.prv_id
		</if>
  </select>
  
  <!-- 根据资源id查询电表信息 xup -->
  <select id="queryMeterByResourceId" resultMap="BaseResultMap" parameterType="Map" >
    select 
   d.meter_id,
	d.prv_id,
	d.prv_sname,
	d.preg_id,
	d.preg_name,
	d.reg_id,
	d.reg_name,
	d.meter_code,
	d.initial_value,
	d.upper_value,
	d.flat_value,
	d.peak_value,
	d.top_value,
	d.valley_value,
	d.flat_upper_value,
	d.peak_upper_value,
	d.valley_upper_value,
	d.top_upper_value,
	d.meter_type,
	d.electricmeter_multiply,
	d.account_number,
	d.install_date,
	d.meter_state,
	d.is_share,
	d.meter_note,
	d.data_from
FROM
	dat_electricmeter d
INNER JOIN ele_baseresourceelectricmeter b ON b.meter_id = d.meter_id
    where d.reg_id = #{regId}
    AND b.relation_state = 0
    and b.baseresource_id=#{baseresourceId}
  </select>
  
    <!-- 根据电表id查询电表是否被关联  xup -->
  <select id="queryMeterByMeterId" resultMap="BaseResultMap" parameterType="Map" >
    select 
   	d.meter_id,
	d.prv_id,
	d.prv_sname,
	d.preg_id,
	d.preg_name,
	d.reg_id,
	d.reg_name,
	d.meter_code,
	d.initial_value,
	d.upper_value,
	d.flat_value,
	d.peak_value,
	d.top_value,
	d.valley_value,
	d.flat_upper_value,
	d.peak_upper_value,
	d.valley_upper_value,
	d.top_upper_value,
	d.meter_type,
	d.electricmeter_multiply,
	d.account_number,
	d.install_date,
	d.meter_state,
	d.is_share,
	d.meter_note,
	d.data_from
	FROM
	dat_electricmeter d
	INNER JOIN ele_baseresourceelectricmeter b ON b.meter_id = d.meter_id
    AND b.relation_state = 0
  	<if test="meterId != null and meterId.size()>0">
    and b.meter_id in
    	 <foreach collection="meterId" item="item" open="(" close=")" separator="," >
                    #{item}
          </foreach>
    </if>
    
  </select>
  
	<select id="selectLinkedElecMeter" parameterType="map" resultType="java.lang.Integer">
		select count(DISTINCT dt.meter_id) from dat_electricmeter dt
		LEFT JOIN ele_baseresourceelectricmeter ebt on dt.meter_id=ebt.meter_id
		where ebt.relation_state=0 and dt.meter_state=0
    	<if test="prv_id != '' and prv_id != null">
        	and dt.prv_id= #{prv_id,jdbcType=VARCHAR}
    	</if>
		<if test="prv_ids != null">
			and dt.prv_id in
			<foreach collection="prv_ids" item="item" index="index"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
  	</select>
  	<select id="selectAllElecMeter" parameterType="map" resultType="java.lang.Integer">
	    select count(DISTINCT dt.meter_id) from dat_electricmeter dt
	    <where>
	    	dt.meter_state=0 and meter_state != -1
	    	<if test="prv_id != null">
	        	and dt.prv_id = #{prv_id,jdbcType=VARCHAR}
	    	</if>
			<if test="prv_ids != null">
				and dt.prv_id in
				<foreach collection="prv_ids" item="item" index="index"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
	    </where>
  	</select>
</mapper>